/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 14.1 		*/
/*  Created On : 27-lis-2018 18:01:50 				*/
/*  DBMS       : Oracle 						*/
/* ---------------------------------------------------- */

/* Drop Triggers, Sequences for Autonumber Columns */

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Dodavatel_DodavatelID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Dodavatel_DodavatelID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Dodavatel_DodavatelID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Dodavatel_DodavatelID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Mnozstvi_MnozstviID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Mnozstvi_MnozstviID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Mnozstvi_MnozstviID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Mnozstvi_MnozstviID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Objednane_zbozi_Objednane_zboziID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Objednane_zbozi_Objednane_zboziID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Objednane_zbozi_Objednane_zboziID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Objednane_zbozi_Objednane_zboziID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Objednavka_ObjednavkaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Objednavka_ObjednavkaID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Objednavka_ObjednavkaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Objednavka_ObjednavkaID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Surovina_SurovinaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Surovina_SurovinaID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Surovina_SurovinaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Surovina_SurovinaID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Zasoba_ZasobaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Zasoba_ZasobaID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Zasoba_ZasobaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Zasoba_ZasobaID"'; 
END IF; 
END;
/


/* Drop Tables */

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Alergen" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Dodavatel" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Mnozstvi" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Objednane_zbozi" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Objednavka" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "R_Surovina_Alergen" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Surovina" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Zasoba" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

/* Create Tables */

CREATE TABLE  "Alergen"
(
	"Nazev" VARCHAR(50) NOT NULL,
	"Popis" VARCHAR(200) NULL,	-- Popis nebezpeci, zobrazuje jak moc pripadne muze  daneho alergika ohrozit
	"AlergenID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Dodavatel"
(
	"Adresa" VARCHAR(100) NULL,	-- Adresa sidla dodavatele
	"Dic" VARCHAR(20) NULL,	-- Danove identifikacni cislo, pro jednoznacnou identifikaci subjektu
	"E-mail" VARCHAR(100) NULL,	-- E-mail na dodavatele
	"Ico" VARCHAR(20) NULL,	-- Unikatni osmimistne idenfikacni cislo pravnicke osoby
	"Nazev" VARCHAR(100) NOT NULL,
	"Telefon" VARCHAR(20) NULL,	-- Telefon na dodavatele
	"DodavatelID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Mnozstvi"
(
	"Pocet" NUMBER(8,2) NULL,
	"MnozstviID" NUMBER(32) NOT NULL,
	"SurovinaID" NUMBER(32) NULL,
	"Polozka_menuID" NUMBER(32) NULL
)
;

CREATE TABLE  "Objednane_zbozi"
(
	"Mnozstvi" NUMBER(16,2) NOT NULL,
	"Objednane_zboziID" NUMBER(32) NOT NULL,
	"ObjednavkaID" NUMBER(32) NOT NULL,
	"SurovinaID" NUMBER(32) NULL
)
;

CREATE TABLE  "Objednavka"
(
	"Cena" FLOAT(32) NULL,
	"Datum_dodani" DATE NULL,
	"Datum_vytvoreni" DATE NOT NULL,
	"ObjednavkaID" NUMBER(32) NOT NULL,
	"DodavatelID" NUMBER(32) NULL
)
;

CREATE TABLE  "R_Surovina_Alergen"
(
	"AlergenID" NUMBER(32) NULL,
	"SurovinaID" NUMBER(32) NULL,
	"ID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Surovina"
(
	"Nazev" VARCHAR(30) NULL,	-- Nazev pro danou surovinu
	"SurovinaID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Zasoba"
(
	"Mnostvi" NUMBER(16,2) NULL,
	"Trvanlivost" DATE NULL,
	"ZasobaID" NUMBER(32) NOT NULL,
	"SurovinaID" NUMBER(32) NULL
)
;

/* Create Comments, Sequences and Triggers for Autonumber Columns */

COMMENT ON TABLE  "Alergen" IS 'U kazde suroviny je potreba evidovat alergeny, ktere jsou obsazene v dane surovine - tyto alergeny jsou vyuzivany v MENU, kde je nutne je mit zobrazene. Alergeny maji svuj popis a nazev.'
;


COMMENT ON COLUMN  "Alergen"."Popis" IS 'Popis nebezpeci, zobrazuje jak moc pripadne muze  daneho alergika ohrozit';

COMMENT ON TABLE  "Dodavatel" IS 'Dodavatel zajistuje v pripade nizkych zasob suroviny pro restauraci. Kazdy dodavatel ma svuj nazev a fakturacni udaje.'
;


COMMENT ON COLUMN  "Dodavatel"."Adresa" IS 'Adresa sidla dodavatele';

COMMENT ON COLUMN  "Dodavatel"."Dic" IS 'Danove identifikacni cislo, pro jednoznacnou identifikaci subjektu';

COMMENT ON COLUMN  "Dodavatel"."E-mail" IS 'E-mail na dodavatele';

COMMENT ON COLUMN  "Dodavatel"."Ico" IS 'Unikatni osmimistne idenfikacni cislo pravnicke osoby';

COMMENT ON COLUMN  "Dodavatel"."Telefon" IS 'Telefon na dodavatele';

CREATE SEQUENCE "SEQ_Dodavatel_DodavatelID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Dodavatel_DodavatelID" 
	BEFORE INSERT 
	ON "Dodavatel" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Dodavatel_DodavatelID".NEXTVAL 
		INTO :NEW."DodavatelID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Mnozstvi" IS 'Trida MNOZSTVI urcuje, kolik a jakych surovin je potreba pro pripravu nejake polozky z menu. Napr. pro pripravu gulase je potreba 200g hoveziho, 1 knedlik, 1 cibule,...'
;


CREATE SEQUENCE "SEQ_Mnozstvi_MnozstviID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Mnozstvi_MnozstviID" 
	BEFORE INSERT 
	ON "Mnozstvi" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Mnozstvi_MnozstviID".NEXTVAL 
		INTO :NEW."MnozstviID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Objednane_zbozi" IS 'Kazda objednavka obsahuje nejake OBJEDNANE ZBOZI. Takove zbozi bylo objednano v urcitem mnozstvi.'
;


CREATE SEQUENCE "SEQ_Objednane_zbozi_Objednane_zboziID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Objednane_zbozi_Objednane_zboziID" 
	BEFORE INSERT 
	ON "Objednane_zbozi" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Objednane_zbozi_Objednane_zboziID".NEXTVAL 
		INTO :NEW."Objednane_zboziID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Objednavka" IS 'Pri objednani SUROVIN u DODAVATELE je vytvarena OBJEDNAVKA. Takova objednavka ma svoji cenu, je vytvorena k urcitemu dni a ma urcite datum dodani do restaurace.'
;


CREATE SEQUENCE "SEQ_Objednavka_ObjednavkaID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Objednavka_ObjednavkaID" 
	BEFORE INSERT 
	ON "Objednavka" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Objednavka_ObjednavkaID".NEXTVAL 
		INTO :NEW."ObjednavkaID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Surovina" IS 'Surovina reprezentuje abstraktni surovinu - kuchare pri vareni nezajima, jestli pri vareni pouzije mleko od dodavatele/vyrobce A nebo od dodavatele/vyrobce B, to same plati pri objednavani surovin.
Napr.: mleko, mouka, knedliky, brambory,...'
;


COMMENT ON COLUMN  "Surovina"."Nazev" IS 'Nazev pro danou surovinu';

CREATE SEQUENCE "SEQ_Surovina_SurovinaID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Surovina_SurovinaID" 
	BEFORE INSERT 
	ON "Surovina" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Surovina_SurovinaID".NEXTVAL 
		INTO :NEW."SurovinaID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Zasoba" IS 'Trida zasoba reprezentuje aktualni skladove zasoby pro kazdou SUROVINU. Tyto zasoby jsou vyuzivany pri objednavani surovin, aby system mohl zjistit, ktere suroviny chybi a je potreba je doobjednat. U kazde zasoby je potreba evidovat jeji mnozstvi a trvanlivost, aby nebyly pri vytvareni jidelnicku brany v potaz prosle suroviny.

Zasoba se vzdy vztahuje ke konkretni surovine, ale surovina muze mit vic zasob - 10x mleko od dodavatele A s trvanlivosti AA, 4x mleko od dodavatele B s trvanlivosti BB.'
;


CREATE SEQUENCE "SEQ_Zasoba_ZasobaID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Zasoba_ZasobaID" 
	BEFORE INSERT 
	ON "Zasoba" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Zasoba_ZasobaID".NEXTVAL 
		INTO :NEW."ZasobaID" 
		FROM DUAL; 
	END;

/


/* Create Primary Keys, Indexes, Uniques, Checks, Triggers */

ALTER TABLE  "Alergen" 
 ADD CONSTRAINT "PK_Alergen"
	PRIMARY KEY ("AlergenID") 
 USING INDEX
;

ALTER TABLE  "Dodavatel" 
 ADD CONSTRAINT "PK_Dodavatel"
	PRIMARY KEY ("DodavatelID") 
 USING INDEX
;

ALTER TABLE  "Mnozstvi" 
 ADD CONSTRAINT "PK_Mnozstvi"
	PRIMARY KEY ("MnozstviID") 
 USING INDEX
;

ALTER TABLE  "Objednane_zbozi" 
 ADD CONSTRAINT "PK_Objednane_zbozi"
	PRIMARY KEY ("Objednane_zboziID") 
 USING INDEX
;

ALTER TABLE  "Objednavka" 
 ADD CONSTRAINT "PK_Objednavka"
	PRIMARY KEY ("ObjednavkaID") 
 USING INDEX
;

ALTER TABLE  "R_Surovina_Alergen" 
 ADD CONSTRAINT "PK_R_Surovina_Alergen"
	PRIMARY KEY ("ID") 
 USING INDEX
;

ALTER TABLE  "Surovina" 
 ADD CONSTRAINT "PK_Surovina"
	PRIMARY KEY ("SurovinaID") 
 USING INDEX
;

ALTER TABLE  "Zasoba" 
 ADD CONSTRAINT "PK_Zasoba"
	PRIMARY KEY ("ZasobaID") 
 USING INDEX
;

/* Create Foreign Key Constraints */

ALTER TABLE  "Mnozstvi" 
 ADD CONSTRAINT "FK_MNOZSTVI_je_potreba_mnozstvi"
	FOREIGN KEY ("SurovinaID") REFERENCES  "Surovina" ("SurovinaID")
;

ALTER TABLE  "Mnozstvi" 
 ADD CONSTRAINT "FK_MNOZSTVI_obsahuje"
	FOREIGN KEY ("Polozka_menuID") REFERENCES  "Polozka_menu" ("Polozka_menuID")
;

ALTER TABLE  "Objednane_zbozi" 
 ADD CONSTRAINT "FK_OBJEDNANE_ZBOZI_je_na"
	FOREIGN KEY ("ObjednavkaID") REFERENCES  "Objednavka" ("ObjednavkaID")
;

ALTER TABLE  "Objednane_zbozi" 
 ADD CONSTRAINT "FK_OBJEDNANE_ZBOZI_je_objednana"
	FOREIGN KEY ("SurovinaID") REFERENCES  "Surovina" ("SurovinaID")
;

ALTER TABLE  "Objednavka" 
 ADD CONSTRAINT "FK_OBJEDNAVKA_dodava"
	FOREIGN KEY ("DodavatelID") REFERENCES  "Dodavatel" ("DodavatelID")
;

ALTER TABLE  "R_Surovina_Alergen" 
 ADD CONSTRAINT "FK_obsahuje_ALERGEN"
	FOREIGN KEY ("AlergenID") REFERENCES  "Alergen" ("AlergenID")
;

ALTER TABLE  "R_Surovina_Alergen" 
 ADD CONSTRAINT "FK_obsahuje_SUROVINA"
	FOREIGN KEY ("SurovinaID") REFERENCES  "Surovina" ("SurovinaID")
;

ALTER TABLE  "Zasoba" 
 ADD CONSTRAINT "FK_ZASOBA_je_v_zasobe"
	FOREIGN KEY ("SurovinaID") REFERENCES  "Surovina" ("SurovinaID")
;
