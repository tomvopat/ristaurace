/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 14.1 		*/
/*  Created On : 27-lis-2018 18:22:32 				*/
/*  DBMS       : Oracle 						*/
/* ---------------------------------------------------- */

/* Drop Triggers, Sequences for Autonumber Columns */

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_R_Stul_Rezervace_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_R_Stul_Rezervace_ID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_R_Stul_Rezervace_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_R_Stul_Rezervace_ID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_R_Ucet_Stul_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_R_Ucet_Stul_ID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_R_Ucet_Stul_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_R_Ucet_Stul_ID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Rezervace_RezervaceID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Rezervace_RezervaceID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Rezervace_RezervaceID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Rezervace_RezervaceID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Stav_polozkyID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Stav_polozkyID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Stav_polozkyID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Stav_polozkyID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Stul_StulID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Stul_StulID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Stul_StulID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Stul_StulID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Ucet_UcetID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Ucet_UcetID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Ucet_UcetID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Ucet_UcetID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Dodavatel_DodavatelID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Dodavatel_DodavatelID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Dodavatel_DodavatelID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Dodavatel_DodavatelID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Mnozstvi_MnozstviID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Mnozstvi_MnozstviID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Mnozstvi_MnozstviID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Mnozstvi_MnozstviID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Objednane_zboziID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Objednane_zboziID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Objednane_zboziID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Objednane_zboziID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Objednavka_ObjednavkaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Objednavka_ObjednavkaID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Objednavka_ObjednavkaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Objednavka_ObjednavkaID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_R_Surovina_Alergen_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_R_Surovina_Alergen_ID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_R_Surovina_Alergen_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_R_Surovina_Alergen_ID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Surovina_SurovinaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Surovina_SurovinaID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Surovina_SurovinaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Surovina_SurovinaID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Zasoba_ZasobaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Zasoba_ZasobaID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Zasoba_ZasobaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Zasoba_ZasobaID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Menu_MenuID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Menu_MenuID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Menu_MenuID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Menu_MenuID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Polozka_menuID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Polozka_menuID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Polozka_menuID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Polozka_menuID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Popularita_PopularitaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Popularita_PopularitaID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Popularita_PopularitaID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Popularita_PopularitaID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_R_PolozkaMenu_Menu_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_R_PolozkaMenu_Menu_ID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_R_PolozkaMenu_Menu_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_R_PolozkaMenu_Menu_ID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_R_PolozkaMenu_Typ_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_R_PolozkaMenu_Typ_ID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_R_PolozkaMenu_Typ_ID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_R_PolozkaMenu_Typ_ID"'; 
END IF; 
END;
/


DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_TRIGGERS 
  WHERE TRIGGER_NAME = 'TRG_Typ_TypID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP TRIGGER "TRG_Typ_TypID"'; 
END IF; 
END;
/

DECLARE 
  C NUMBER; 
BEGIN 
SELECT COUNT(*) INTO C 
FROM USER_SEQUENCES 
  WHERE SEQUENCE_NAME = 'SEQ_Typ_TypID'; 
  IF (C > 0) THEN 
    EXECUTE IMMEDIATE 'DROP SEQUENCE "SEQ_Typ_TypID"'; 
END IF; 
END;
/

/* Drop Tables */

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "R_Stul_Rezervace" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "R_Ucet_Stul" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Rezervace" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Stav_polozky" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Stul" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Ucet" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Alergen" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Dodavatel" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Mnozstvi" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Objednane_zbozi" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Objednavka" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "R_Surovina_Alergen" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Surovina" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Zasoba" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Menu" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Polozka_menu" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Popularita" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "R_PolozkaMenu_Menu" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "R_PolozkaMenu_Typ" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

begin
	EXECUTE IMMEDIATE 'DROP TABLE   "Typ" CASCADE CONSTRAINTS';
	EXCEPTION WHEN OTHERS THEN NULL;
end;
/

/* Create Tables */

CREATE TABLE  "R_Stul_Rezervace"
(
	"RezervaceID" NUMBER(32) NULL,
	"StulID" NUMBER(32) NULL,
	"ID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "R_Ucet_Stul"
(
	"UcetID" NUMBER(32) NULL,
	"StulID" NUMBER(32) NULL,
	"ID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Rezervace"
(
	"Cas_zahajeni" DATE NOT NULL,	-- Presny cas, na kdy je dana rezervace obsazena
	"Cas_ukonceni" DATE NULL,
	"Jmeno" VARCHAR(50) NOT NULL,	-- Jmeno, na koho ma rezervace zaznamenana
	"Pocet_osob" NUMBER(32) NULL,	-- Pocet udava kolik osob bude ocekavano
	"RezervaceID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Stav_polozky"
(
	"Cas_vytvoreni" DATE NOT NULL,
	"Stav" VARCHAR(20) NULL,
	"Stav_polozkyID" NUMBER(32) NOT NULL,
	"Polozka_menuID" NUMBER(32) NULL,
	"UcetID" NUMBER(32) NULL
)
;

CREATE TABLE  "Stul"
(
	"Cislo_stolu" VARCHAR(5) NOT NULL,	-- Identifikace konkretniho stolu
	"Pocet_mist" NUMBER(8,2) NULL,	--  Udava kapacitu u daneho stolu
	"StulID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Ucet"
(
	"Datum_vytvoreni" DATE NOT NULL,	-- Datum, kdy byl pro zakaznika vystaven ucet
	"Mena" VARCHAR(3) NULL,	-- Mena (CZK/USD/EUR...), ve ktere zakaznik platil
	"Platba_kartou" CHAR(1 BYTE) NOT NULL,
	"Sleva" FLOAT(32) NULL,	-- Informace o tom, zda byla poskytnuta zakaznikovi sleva
	"UcetID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Alergen"
(
	"Nazev" VARCHAR(50) NOT NULL,
	"Popis" VARCHAR(200) NULL,	-- Popis nebezpeci, zobrazuje jak moc pripadne muze  daneho alergika ohrozit
	"AlergenID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Dodavatel"
(
	"Adresa" VARCHAR(100) NULL,	-- Adresa sidla dodavatele
	"Dic" VARCHAR(20) NULL,	-- Danove identifikacni cislo, pro jednoznacnou identifikaci subjektu
	"E-mail" VARCHAR(100) NULL,	-- E-mail na dodavatele
	"Ico" VARCHAR(20) NULL,	-- Unikatni osmimistne idenfikacni cislo pravnicke osoby
	"Nazev" VARCHAR(100) NOT NULL,
	"Telefon" VARCHAR(20) NULL,	-- Telefon na dodavatele
	"DodavatelID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Mnozstvi"
(
	"Pocet" NUMBER(8,2) NULL,
	"MnozstviID" NUMBER(32) NOT NULL,
	"SurovinaID" NUMBER(32) NULL,
	"Polozka_menuID" NUMBER(32) NULL
)
;

CREATE TABLE  "Objednane_zbozi"
(
	"Mnozstvi" NUMBER(16,2) NOT NULL,
	"Objednane_zboziID" NUMBER(32) NOT NULL,
	"ObjednavkaID" NUMBER(32) NOT NULL,
	"SurovinaID" NUMBER(32) NULL
)
;

CREATE TABLE  "Objednavka"
(
	"Cena" FLOAT(32) NULL,
	"Datum_dodani" DATE NULL,
	"Datum_vytvoreni" DATE NOT NULL,
	"ObjednavkaID" NUMBER(32) NOT NULL,
	"DodavatelID" NUMBER(32) NULL
)
;

CREATE TABLE  "R_Surovina_Alergen"
(
	"AlergenID" NUMBER(32) NULL,
	"SurovinaID" NUMBER(32) NULL,
	"ID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Surovina"
(
	"Nazev" VARCHAR(30) NULL,	-- Nazev pro danou surovinu
	"SurovinaID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Zasoba"
(
	"Mnostvi" NUMBER(16,2) NULL,
	"Trvanlivost" DATE NULL,
	"ZasobaID" NUMBER(32) NOT NULL,
	"SurovinaID" NUMBER(32) NULL
)
;

CREATE TABLE  "Menu"
(
	"Jazyk" VARCHAR(50) NULL,	-- Informace v jakem jazyce je jidelnicek napsan
	"Platne_do" DATE NULL,
	"Platne_od" DATE NULL,	-- Aktualni datum,pro ktery je jidelnicek platny
	"MenuID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Polozka_menu"
(
	"Cena" FLOAT(32) NOT NULL,
	"Nazev" VARCHAR(100) NULL,
	"Polozka_menuID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Popularita"
(
	"Datum" DATE NULL,
	"Hodnota" NUMBER(8,2) NULL,
	"PopularitaID" NUMBER(32) NOT NULL,
	"Polozka_menuID" NUMBER(32) NULL
)
;

CREATE TABLE  "R_PolozkaMenu_Menu"
(
	"MenuID" NUMBER(32) NULL,
	"Polozka_menuID" NUMBER(32) NULL,
	"ID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "R_PolozkaMenu_Typ"
(
	"Polozka_menuID" NUMBER(32) NULL,
	"TypID" NUMBER(32) NULL,
	"ID" NUMBER(32) NOT NULL
)
;

CREATE TABLE  "Typ"
(
	"Nazev" VARCHAR(50) NULL,
	"TypID" NUMBER(32) NOT NULL
)
;

/* Create Comments, Sequences and Triggers for Autonumber Columns */

CREATE SEQUENCE "SEQ_R_Stul_Rezervace_ID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_R_Stul_Rezervace_ID" 
	BEFORE INSERT 
	ON "R_Stul_Rezervace" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_R_Stul_Rezervace_ID".NEXTVAL 
		INTO :NEW."ID" 
		FROM DUAL; 
	END;

/


CREATE SEQUENCE "SEQ_R_Ucet_Stul_ID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_R_Ucet_Stul_ID" 
	BEFORE INSERT 
	ON "R_Ucet_Stul" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_R_Ucet_Stul_ID".NEXTVAL 
		INTO :NEW."ID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Rezervace" IS 'Rezervace je vytvorena pro konkretniho zakaznika na konkretni cas a pocet osob, pote je prirazena konkretnimu stolu nebo stolum, tak aby stoly mely dostatecnou kapacitu pro pocet osob.'
;


COMMENT ON COLUMN  "Rezervace"."Cas_zahajeni" IS 'Presny cas, na kdy je dana rezervace obsazena';

COMMENT ON COLUMN  "Rezervace"."Jmeno" IS 'Jmeno, na koho ma rezervace zaznamenana';

COMMENT ON COLUMN  "Rezervace"."Pocet_osob" IS 'Pocet udava kolik osob bude ocekavano';

CREATE SEQUENCE "SEQ_Rezervace_RezervaceID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Rezervace_RezervaceID" 
	BEFORE INSERT 
	ON "Rezervace" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Rezervace_RezervaceID".NEXTVAL 
		INTO :NEW."RezervaceID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Stav_polozky" IS 'Pri pridavani polozky z menu na ucet je potreba udrzovat cas jeji pridani a take jeji stav, tzn. zda se pripravuje nebo byla zakaznikovi vydana.'
;


CREATE SEQUENCE "SEQ_Stav_polozkyID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Stav_polozkyID" 
	BEFORE INSERT 
	ON "Stav_polozky" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Stav_polozkyID".NEXTVAL 
		INTO :NEW."Stav_polozkyID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Stul" IS 'Stul ma urcity pocet mist a jednoznacny identifikator (cislo stolu), aby cisnici vedeli, o ktery stul jde. Stolu je pak prirazen ucet, pokud u nej sedi zakaznik, ktery si neco objednal. Stul muze byt take rezervovana zakaznikem na urcitou dobu a pro urcity pocet osob.'
;


COMMENT ON COLUMN  "Stul"."Cislo_stolu" IS 'Identifikace konkretniho stolu';

COMMENT ON COLUMN  "Stul"."Pocet_mist" IS '
Udava kapacitu u daneho stolu';

CREATE SEQUENCE "SEQ_Stul_StulID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Stul_StulID" 
	BEFORE INSERT 
	ON "Stul" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Stul_StulID".NEXTVAL 
		INTO :NEW."StulID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Ucet" IS 'Na ucet se pripisuji polozky, ktere si zakaznik objednal. Udzuje si informaci o dobe vytvoreni (cas prvni objednavky), zda je na tento ucet prirazena nejaka sleva a zda byla castka uhrazena kartou nebo v hotovosti. Ucet je prirazen konkretnimu stolu a obsahuje polozky z menu.'
;


COMMENT ON COLUMN  "Ucet"."Datum_vytvoreni" IS 'Datum, kdy byl pro zakaznika vystaven ucet';

COMMENT ON COLUMN  "Ucet"."Mena" IS 'Mena (CZK/USD/EUR...), ve ktere zakaznik platil';

COMMENT ON COLUMN  "Ucet"."Sleva" IS 'Informace o tom, zda byla poskytnuta zakaznikovi sleva';

CREATE SEQUENCE "SEQ_Ucet_UcetID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Ucet_UcetID" 
	BEFORE INSERT 
	ON "Ucet" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Ucet_UcetID".NEXTVAL 
		INTO :NEW."UcetID" 
		FROM DUAL; 
	END;

/


/* Create Comments, Sequences and Triggers for Autonumber Columns */

COMMENT ON TABLE  "Alergen" IS 'U kazde suroviny je potreba evidovat alergeny, ktere jsou obsazene v dane surovine - tyto alergeny jsou vyuzivany v MENU, kde je nutne je mit zobrazene. Alergeny maji svuj popis a nazev.'
;


COMMENT ON COLUMN  "Alergen"."Popis" IS 'Popis nebezpeci, zobrazuje jak moc pripadne muze  daneho alergika ohrozit';

COMMENT ON TABLE  "Dodavatel" IS 'Dodavatel zajistuje v pripade nizkych zasob suroviny pro restauraci. Kazdy dodavatel ma svuj nazev a fakturacni udaje.'
;


COMMENT ON COLUMN  "Dodavatel"."Adresa" IS 'Adresa sidla dodavatele';

COMMENT ON COLUMN  "Dodavatel"."Dic" IS 'Danove identifikacni cislo, pro jednoznacnou identifikaci subjektu';

COMMENT ON COLUMN  "Dodavatel"."E-mail" IS 'E-mail na dodavatele';

COMMENT ON COLUMN  "Dodavatel"."Ico" IS 'Unikatni osmimistne idenfikacni cislo pravnicke osoby';

COMMENT ON COLUMN  "Dodavatel"."Telefon" IS 'Telefon na dodavatele';

CREATE SEQUENCE "SEQ_Dodavatel_DodavatelID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Dodavatel_DodavatelID" 
	BEFORE INSERT 
	ON "Dodavatel" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Dodavatel_DodavatelID".NEXTVAL 
		INTO :NEW."DodavatelID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Mnozstvi" IS 'Trida MNOZSTVI urcuje, kolik a jakych surovin je potreba pro pripravu nejake polozky z menu. Napr. pro pripravu gulase je potreba 200g hoveziho, 1 knedlik, 1 cibule,...'
;


CREATE SEQUENCE "SEQ_Mnozstvi_MnozstviID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Mnozstvi_MnozstviID" 
	BEFORE INSERT 
	ON "Mnozstvi" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Mnozstvi_MnozstviID".NEXTVAL 
		INTO :NEW."MnozstviID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Objednane_zbozi" IS 'Kazda objednavka obsahuje nejake OBJEDNANE ZBOZI. Takove zbozi bylo objednano v urcitem mnozstvi.'
;


CREATE SEQUENCE "SEQ_Objednane_zboziID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Objednane_zboziID" 
	BEFORE INSERT 
	ON "Objednane_zbozi" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Objednane_zboziID".NEXTVAL 
		INTO :NEW."Objednane_zboziID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Objednavka" IS 'Pri objednani SUROVIN u DODAVATELE je vytvarena OBJEDNAVKA. Takova objednavka ma svoji cenu, je vytvorena k urcitemu dni a ma urcite datum dodani do restaurace.'
;


CREATE SEQUENCE "SEQ_Objednavka_ObjednavkaID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Objednavka_ObjednavkaID" 
	BEFORE INSERT 
	ON "Objednavka" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Objednavka_ObjednavkaID".NEXTVAL 
		INTO :NEW."ObjednavkaID" 
		FROM DUAL; 
	END;

/


CREATE SEQUENCE "SEQ_R_Surovina_Alergen_ID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_R_Surovina_Alergen_ID" 
	BEFORE INSERT 
	ON "R_Surovina_Alergen" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_R_Surovina_Alergen_ID".NEXTVAL 
		INTO :NEW."ID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Surovina" IS 'Surovina reprezentuje abstraktni surovinu - kuchare pri vareni nezajima, jestli pri vareni pouzije mleko od dodavatele/vyrobce A nebo od dodavatele/vyrobce B, to same plati pri objednavani surovin.
Napr.: mleko, mouka, knedliky, brambory,...'
;


COMMENT ON COLUMN  "Surovina"."Nazev" IS 'Nazev pro danou surovinu';

CREATE SEQUENCE "SEQ_Surovina_SurovinaID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Surovina_SurovinaID" 
	BEFORE INSERT 
	ON "Surovina" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Surovina_SurovinaID".NEXTVAL 
		INTO :NEW."SurovinaID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Zasoba" IS 'Trida zasoba reprezentuje aktualni skladove zasoby pro kazdou SUROVINU. Tyto zasoby jsou vyuzivany pri objednavani surovin, aby system mohl zjistit, ktere suroviny chybi a je potreba je doobjednat. U kazde zasoby je potreba evidovat jeji mnozstvi a trvanlivost, aby nebyly pri vytvareni jidelnicku brany v potaz prosle suroviny.

Zasoba se vzdy vztahuje ke konkretni surovine, ale surovina muze mit vic zasob - 10x mleko od dodavatele A s trvanlivosti AA, 4x mleko od dodavatele B s trvanlivosti BB.'
;


CREATE SEQUENCE "SEQ_Zasoba_ZasobaID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Zasoba_ZasobaID" 
	BEFORE INSERT 
	ON "Zasoba" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Zasoba_ZasobaID".NEXTVAL 
		INTO :NEW."ZasobaID" 
		FROM DUAL; 
	END;

/
COMMENT ON TABLE  "Menu" IS 'Menu obsahuje polozky menu, ze kterych si zakaznici vybiraji sve objednavky. Menu ma urcitou platnost a jazyk.'
;


COMMENT ON COLUMN  "Menu"."Jazyk" IS 'Informace v jakem jazyce je jidelnicek napsan';

COMMENT ON COLUMN  "Menu"."Platne_od" IS 'Aktualni datum,pro ktery je jidelnicek platny';

CREATE SEQUENCE "SEQ_Menu_MenuID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Menu_MenuID" 
	BEFORE INSERT 
	ON "Menu" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Menu_MenuID".NEXTVAL 
		INTO :NEW."MenuID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Polozka_menu" IS 'Polozka menu je konkretni polozka, kterou si zakaznik muze vybrat z menu a nasledne objednat u cisnika. Kazda takova polozka ma svoji cenu a nazev.'
;


CREATE SEQUENCE "SEQ_Polozka_menuID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Polozka_menuID" 
	BEFORE INSERT 
	ON "Polozka_menu" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Polozka_menuID".NEXTVAL 
		INTO :NEW."Polozka_menuID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Popularita" IS 'U kazdeho polozky menu je potreba udrzovat jeji popularitu. Tato popularita se vyuziva pri sestavovani denniho menu a je urcovana podle mnozstvi objednavek daneho jidla. Popularita se v case vyviji, proto je u ni potreba udrzovat datum.'
;


CREATE SEQUENCE "SEQ_Popularita_PopularitaID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Popularita_PopularitaID" 
	BEFORE INSERT 
	ON "Popularita" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Popularita_PopularitaID".NEXTVAL 
		INTO :NEW."PopularitaID" 
		FROM DUAL; 
	END;

/


CREATE SEQUENCE "SEQ_R_PolozkaMenu_Menu_ID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_R_PolozkaMenu_Menu_ID" 
	BEFORE INSERT 
	ON "R_PolozkaMenu_Menu" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_R_PolozkaMenu_Menu_ID".NEXTVAL 
		INTO :NEW."ID" 
		FROM DUAL; 
	END;

/


CREATE SEQUENCE "SEQ_R_PolozkaMenu_Typ_ID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_R_PolozkaMenu_Typ_ID" 
	BEFORE INSERT 
	ON "R_PolozkaMenu_Typ" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_R_PolozkaMenu_Typ_ID".NEXTVAL 
		INTO :NEW."ID" 
		FROM DUAL; 
	END;

/


COMMENT ON TABLE  "Typ" IS 'Polozky menu jsou rozdeleny do urcitych kategorii podle jejich typu - alkohol, napoje, testoviny, polevky,...'
;


CREATE SEQUENCE "SEQ_Typ_TypID" 
	INCREMENT BY 1 
	START WITH 1 
	NOMAXVALUE 
	MINVALUE  1 
	NOCYCLE 
	NOCACHE 
	NOORDER
;


CREATE OR REPLACE TRIGGER "TRG_Typ_TypID" 
	BEFORE INSERT 
	ON "Typ" 
	FOR EACH ROW 
	BEGIN 
		SELECT "SEQ_Typ_TypID".NEXTVAL 
		INTO :NEW."TypID" 
		FROM DUAL; 
	END;

/


/* Create Primary Keys, Indexes, Uniques, Checks, Triggers */

ALTER TABLE  "R_Stul_Rezervace" 
 ADD CONSTRAINT "PK_R_Stul_Rezervace"
	PRIMARY KEY ("ID") 
 USING INDEX
;

ALTER TABLE  "R_Ucet_Stul" 
 ADD CONSTRAINT "PK_R_Ucet_Stul"
	PRIMARY KEY ("ID") 
 USING INDEX
;

ALTER TABLE  "Rezervace" 
 ADD CONSTRAINT "PK_Rezervace"
	PRIMARY KEY ("RezervaceID") 
 USING INDEX
;

ALTER TABLE  "Stav_polozky" 
 ADD CONSTRAINT "PK_Stav_polozky"
	PRIMARY KEY ("Stav_polozkyID") 
 USING INDEX
;

ALTER TABLE  "Stul" 
 ADD CONSTRAINT "PK_Stul"
	PRIMARY KEY ("StulID") 
 USING INDEX
;

ALTER TABLE  "Ucet" 
 ADD CONSTRAINT "PK_Ucet"
	PRIMARY KEY ("UcetID") 
 USING INDEX
;

ALTER TABLE  "Alergen" 
 ADD CONSTRAINT "PK_Alergen"
	PRIMARY KEY ("AlergenID") 
 USING INDEX
;

ALTER TABLE  "Dodavatel" 
 ADD CONSTRAINT "PK_Dodavatel"
	PRIMARY KEY ("DodavatelID") 
 USING INDEX
;

ALTER TABLE  "Mnozstvi" 
 ADD CONSTRAINT "PK_Mnozstvi"
	PRIMARY KEY ("MnozstviID") 
 USING INDEX
;

ALTER TABLE  "Objednane_zbozi" 
 ADD CONSTRAINT "PK_Objednane_zbozi"
	PRIMARY KEY ("Objednane_zboziID") 
 USING INDEX
;

ALTER TABLE  "Objednavka" 
 ADD CONSTRAINT "PK_Objednavka"
	PRIMARY KEY ("ObjednavkaID") 
 USING INDEX
;

ALTER TABLE  "R_Surovina_Alergen" 
 ADD CONSTRAINT "PK_R_Surovina_Alergen"
	PRIMARY KEY ("ID") 
 USING INDEX
;

ALTER TABLE  "Surovina" 
 ADD CONSTRAINT "PK_Surovina"
	PRIMARY KEY ("SurovinaID") 
 USING INDEX
;

ALTER TABLE  "Zasoba" 
 ADD CONSTRAINT "PK_Zasoba"
	PRIMARY KEY ("ZasobaID") 
 USING INDEX
;

ALTER TABLE  "Menu" 
 ADD CONSTRAINT "PK_Menu"
	PRIMARY KEY ("MenuID") 
 USING INDEX
;

ALTER TABLE  "Polozka_menu" 
 ADD CONSTRAINT "PK_Polozka_menu"
	PRIMARY KEY ("Polozka_menuID") 
 USING INDEX
;

ALTER TABLE  "Popularita" 
 ADD CONSTRAINT "PK_Popularita"
	PRIMARY KEY ("PopularitaID") 
 USING INDEX
;

ALTER TABLE  "R_PolozkaMenu_Menu" 
 ADD CONSTRAINT "PK_R_PolozkaMenu_Menu"
	PRIMARY KEY ("ID") 
 USING INDEX
;

ALTER TABLE  "R_PolozkaMenu_Typ" 
 ADD CONSTRAINT "PK_R_PolozkaMenu_Typ"
	PRIMARY KEY ("ID") 
 USING INDEX
;

ALTER TABLE  "Typ" 
 ADD CONSTRAINT "PK_Typ"
	PRIMARY KEY ("TypID") 
 USING INDEX
;

ALTER TABLE  "R_Stul_Rezervace" 
 ADD CONSTRAINT "FK_je_prirazena_STUL"
	FOREIGN KEY ("StulID") REFERENCES  "Stul" ("StulID")
;

ALTER TABLE  "R_Stul_Rezervace" 
 ADD CONSTRAINT "FK_je_prirazena_REZERVACE"
	FOREIGN KEY ("RezervaceID") REFERENCES  "Rezervace" ("RezervaceID")
;

ALTER TABLE  "R_Ucet_Stul" 
 ADD CONSTRAINT "FK_je_prirazen_UCET"
	FOREIGN KEY ("UcetID") REFERENCES  "Ucet" ("UcetID")
;

ALTER TABLE  "R_Ucet_Stul" 
 ADD CONSTRAINT "FK_je_prirazen_STUL"
	FOREIGN KEY ("StulID") REFERENCES  "Stul" ("StulID")
;

ALTER TABLE  "Stav_polozky" 
 ADD CONSTRAINT "FK_STAV_POLOZKY_ma_stav"
	FOREIGN KEY ("Polozka_menuID") REFERENCES  "Polozka_menu" ("Polozka_menuID")
;

ALTER TABLE  "Stav_polozky" 
 ADD CONSTRAINT "FK_STAV_POLOZKY_obsahuje"
	FOREIGN KEY ("UcetID") REFERENCES  "Ucet" ("UcetID")
;

ALTER TABLE  "Mnozstvi" 
 ADD CONSTRAINT "FK_MNOZSTVI"
	FOREIGN KEY ("SurovinaID") REFERENCES  "Surovina" ("SurovinaID")
;

ALTER TABLE  "Mnozstvi" 
 ADD CONSTRAINT "FK_MNOZSTVI_obsahuje"
	FOREIGN KEY ("Polozka_menuID") REFERENCES  "Polozka_menu" ("Polozka_menuID")
;

ALTER TABLE  "Objednane_zbozi" 
 ADD CONSTRAINT "FK_OBJEDNANE_ZBOZI_je_na"
	FOREIGN KEY ("ObjednavkaID") REFERENCES  "Objednavka" ("ObjednavkaID")
;

ALTER TABLE  "Objednane_zbozi" 
 ADD CONSTRAINT "FK_OBJEDNANE_ZBOZI"
	FOREIGN KEY ("SurovinaID") REFERENCES  "Surovina" ("SurovinaID")
;

ALTER TABLE  "Objednavka" 
 ADD CONSTRAINT "FK_OBJEDNAVKA_dodava"
	FOREIGN KEY ("DodavatelID") REFERENCES  "Dodavatel" ("DodavatelID")
;

ALTER TABLE  "R_Surovina_Alergen" 
 ADD CONSTRAINT "FK_obsahuje_ALERGEN"
	FOREIGN KEY ("AlergenID") REFERENCES  "Alergen" ("AlergenID")
;

ALTER TABLE  "R_Surovina_Alergen" 
 ADD CONSTRAINT "FK_obsahuje_SUROVINA"
	FOREIGN KEY ("SurovinaID") REFERENCES  "Surovina" ("SurovinaID")
;

ALTER TABLE  "Zasoba" 
 ADD CONSTRAINT "FK_ZASOBA_je_v_zasobe"
	FOREIGN KEY ("SurovinaID") REFERENCES  "Surovina" ("SurovinaID")
;

ALTER TABLE  "Popularita" 
 ADD CONSTRAINT "FK_POPULARITA_ma_popularitu"
	FOREIGN KEY ("Polozka_menuID") REFERENCES  "Polozka_menu" ("Polozka_menuID")
;

ALTER TABLE  "R_PolozkaMenu_Menu" 
 ADD CONSTRAINT "FK_jsou_na_POLOZKA_MENU"
	FOREIGN KEY ("Polozka_menuID") REFERENCES  "Polozka_menu" ("Polozka_menuID")
;

ALTER TABLE  "R_PolozkaMenu_Menu" 
 ADD CONSTRAINT "FK_jsou_na_MENU"
	FOREIGN KEY ("MenuID") REFERENCES  "Menu" ("MenuID")
;

ALTER TABLE  "R_PolozkaMenu_Typ" 
 ADD CONSTRAINT "FK_je_typu_TYP"
	FOREIGN KEY ("TypID") REFERENCES  "Typ" ("TypID")
;

ALTER TABLE  "R_PolozkaMenu_Typ" 
 ADD CONSTRAINT "FK_je_typu_POLOZKA_MENU"
	FOREIGN KEY ("Polozka_menuID") REFERENCES  "Polozka_menu" ("Polozka_menuID")
;
